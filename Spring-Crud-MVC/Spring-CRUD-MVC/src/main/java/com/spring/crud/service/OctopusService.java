package com.spring.crud.service;

import com.spring.crud.dto.OctopusDTO;

/**
 * Пометить класс как сервисный bean для Spring.
 * Сделать DI класса OctopusRepository в данный класс(OctopusService).
 * Реализовать методы, описанные ниже.
 */
public class OctopusService {


    /**
     * Метод получает на вход DTO сущности ОСЬМИНОГ.
     * Исходя из данных в DTO необходимо создать и сохранить в БД новую запись осьминога.
     * Вернуть необходимо ID сохраненной в БД новой записи осьминога.
     *
     * @param octopusDTO - DTO сущности ОСЬМИНОГ.
     * @return - ID сохраненной в БД новой записи осьминога.
     */
    public Long createOctopus(OctopusDTO octopusDTO) {
        return null;
    }

    /**
     * Метод получает на вход ID осьминога.
     * Необходимо найти запись осьминога по ID и пометить его как удаленный(неактуальный).
     * Возвращать ничего не нужно. Тип метода void.
     *
     * @param id - ID осьминога.
     */
    public void deleteOctopus(Long id) {

    }

    /**
     * Метод получает на вход ID осьминога.
     * Необходимо вернуть клиенту DTO осьминога исходя из найденной записи в БД.
     *
     * @param id - ID осьминога.
     * @return - DTO осьминога.
     */
    public OctopusDTO findOctopus(Long id) {
        return null;
    }

    /**
     * Метод получает на вход два параметра:
     * 1. ID осьминога, который будет редактироваться.
     * 2. DTO осьминога, исходя из данных которого нужно редактировать уже существующую запись в БД.
     * Важно: если те или иные поля в DTO пришли со значением null,
     * то редактировать аналогичные поля в сущности не нужно!
     * Вернуть нужно ID отредактированного осьминога.
     *
     * @param octopusId  - ID осьминога, которая будет редактироваться.
     * @param octopusDTO - DTO осьминога, исходя из данных которого нужно редактировать уже существующую запись в БД.
     * @return - ID отредактированной осьминога.
     */
    public Long editOctopus(Long octopusId, OctopusDTO octopusDTO) {
        return null;
    }
}